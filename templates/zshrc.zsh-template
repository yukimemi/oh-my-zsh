# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="my"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Uncomment this to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want to disable command autocorrection
# DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git)

source $ZSH/oh-my-zsh.sh

# Customize to your needs...

# LANG
export LANG=ja_JP.UTF-8
export LC_CTYPE="ja_JP.UTF-8"

# antigen
[[ ! -d ~/.antigen ]] && git clone https://github.com/zsh-users/antigen.git ~/.antigen
source ~/.antigen/antigen.zsh

# Load the oh-my-zsh's library.
#antigen-lib
antigen-use oh-my-zsh

# Bundles from the default repo (robbyrussell's oh-my-zsh).
antigen-bundle git
antigen-bundle heroku
antigen-bundle pip
antigen-bundle lein
antigen-bundle rbenv
antigen-bundle virtualenv
#antigen-bundle virtualenvwrapper
#antigen-bundle command-not-found

# Syntax highlighting bundle.
antigen-bundle zsh-users/zsh-syntax-highlighting

# Tell antigen that you're done.
antigen-apply

# neobundle
[[ ! -d ~/.bundle/neobundle.vim ]] && git clone git://github.com/Shougo/neobundle.vim ~/.bundle/neobundle.vim

#######################################################################################################
###{{{ キーバインド
bindkey -v

# zshのviキーバインドでコマンドラインスタック＋α #Zsh - Qiita
# http://qiita.com/items/1f2c7793944b1f6cc346
show_buffer_stack() {
    POSTDISPLAY="
    stack: $LBUFFER"
    zle push-line-or-edit
}
zle -N show_buffer_stack
setopt noflowcontrol
bindkey '^Q' show_buffer_stack

# 補完候補のメニュー選択で、矢印キーの代わりにhjklで移動出来るようにする。
zmodload zsh/complist
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char

# 途中までコマンドを打っていて、これ前も入力したと思ったときに、Ctrl-Pで補完してくれる。さらに押せばより古いコマンドで補完。やっぱりさっきの、というときはCtrl-nで戻る。
autoload -Uz history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "" history-beginning-search-backward-end
bindkey "" history-beginning-search-forward-end

# }}}
#######################################################################################################
###{{{ 補完に関する設定


# 移動した場所を記録し、cd -[TAB] で以前移動したディレクトリの候補を提示してくれて、その番号を入力することで移動出来るようになる。
setopt auto_pushd

# auto_pushdで重複するディレクトリは記録しないようにする。
setopt pushd_ignore_dups

# コマンドのスペルミスを指摘して予想される正しいコマンドを提示してくれる。このときのプロンプトがSPROMPT。
setopt nocorrect_all
setopt correct


# 補完候補が複数ある時に、一覧表示する
setopt auto_list

#  auto_list の補完候補一覧で、ls -F のようにファイルの種別をマーク表示
setopt list_types

# コマンドラインの引数で --prefix=/usr などの = 以降でも補完できる
setopt magic_equal_subst

# サスペンド中のプロセスと同じコマンド名を実行した場合はリジュームする
setopt auto_resume

# ディレクトリの最後のスラッシュを自動で削除する
setopt autoremoveslash

# コマンドにsudoを付けてもきちんと補完出来るようにする。Ubuntuだと/etc/zsh/zshrcで設定されている。
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

# 大文字・小文字を区別しないで補完出来るようにするが、大文字を入力した場合は区別する。
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# zstyleによる補完設定
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
zstyle ':completion:*:messages' format $YELLOW'%d'$DEFAULT
zstyle ':completion:*:warnings' format $RED'No matches for:'$YELLOW' %d'$DEFAULT
zstyle ':completion:*:descriptions' format $YELLOW'completing %B%d%b'$DEFAULT
zstyle ':completion:*:corrections' format $YELLOW'%B%d '$RED'(errors: %e)%b'$DEFAULT
zstyle ':completion:*:options' description 'yes'
# グループ名に空文字列を指定すると，マッチ対象のタグ名がグループ名に使われる。
# したがって，すべての マッチ種別を別々に表示させたいなら以下のようにする
zstyle ':completion:*' group-name ''

# }}}
#######################################################################################################
###{{{ 履歴(history)に関する設定
## ヒストリを保存するファイル
if [ -d ~/Dropbox ]; then
    HISTFILE=~/Dropbox/.zsh_history
else
    HISTFILE=~/.zsh_history
fi

# 履歴を複数端末間で共有する。
setopt share_history

# 複数の zsh を同時に使う時など history ファイルに上書きせず追加する
setopt append_history

# 重複するコマンドが記憶されるとき、古い方を削除する。
setopt hist_ignore_all_dups

# 直前のコマンドと同じ場合履歴に追加しない。
setopt hist_ignore_dups

# 重複するコマンドが保存されるとき、古い方を削除する。
setopt hist_save_no_dups

#  zsh の開始・終了時刻をヒストリファイルに書き込む
setopt extended_history

#  コマンドラインの先頭がスペースで始まる場合ヒストリに追加しない
setopt hist_ignore_space

#  ヒストリを呼び出してから実行する間に一旦編集できる状態になる
setopt hist_verify

# apt-getやdpkgなどのキャッシュ
if [ -d ~/.zsh/cache ]; then
    zstyle ':completion:*' use-cache yes
    zstyle ':completion:*' cache-path ~/.zsh/cache
fi

# }}}
#######################################################################################################
###{{{ alias
# それぞれの環境に合わせてaliasを設定
case "${OSTYPE}" in
    freebsd*|darwin11*|darwin12*)
        alias ls='ls --color=auto'
        #alias sc='screen -U -RR'
        alias fcd='source ~/bin/scripts/fcd.sh'
        alias vim='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim "$@"'
        #alias -g macvim='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim "$@"'
                #alias vim='env LANG=ja_JP.UTF-8 /Applications/MacPorts/MacVim.app/Contents/MacOS/Vim "$@"'
        alias gvim='env LANG=ja_JP.UTF-8 open -a /Applications/MacVim.app "$@"'
        alias rm=rmtrash
        #alias port='port -d'
        alias empty-trash='sudo /bin/rm -rf ~/.Trash/*'
        alias shitamplayer='mplayer -fixed-vo -framedrop -ontop -geometry 100%:100%'
        alias vlc='open -a /Applications/vlc/VLC.app "$@"'
        alias gansimu='cd ~/Applications/GANSIMU_MHP3; java -jar gansimu.jar'
        alias nicocache='cd ~/Applications/nicocache; java -jar NicoCache_nl.jar'
        #alias mplayer='open -a /Applications/MPlayerX.app "$@"'
        #alias java='java -Dfile.encoding=UTF-8'
        #alias mocp='jackd -d coreaudio &; mocp'
        alias mocp='mocp -T ~/.moc/themes/yellow_red_theme'
        alias jackd='jackd -d coreaudio &'
        #alias less='/usr/share/vim/vim72/macros/less.sh'
        #alias sudo='sudo '
        alias screensaver='open /System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app'
        alias vagrantOld='HOME=/Users/mini/.veewee; bundle exec vagrant'
        # alias to nw
        alias nw="/Applications/node-webkit.app/Contents/MacOS/node-webkit"
        ;;
    darwin9)
        alias ls='ls --color=auto'
        export GIT_PAGER='less'
        ;;
    linux*|cygwin)
        alias ls='ls --color=auto'
        alias sc='byobu -U -RR'
        #alias rm=trash-cli
        alias link='/cygdrive/c/Program\ Files/Windows\ Resource\ Kits/Tools/linkd'
        alias open=cygstart
        ;;
esac

alias macvim='mvim --remote-silent'
alias vimfiler='vim -c VimFilerDouble'
alias mvimfiler='mvim -c VimFilerDouble'
alias vimshell='vim -c VimShell'
alias mvimshell='mvim -c VimShell'
alias diff=colordiff
alias mv='mv -iv'
alias cp='cp -iv'
alias ll='ls -lh'
alias lla='ls -al'
alias mixi='firefox http://mixi.jp/home.pl?from=global &'
#alias ssh-server='screen -t server ssh -X server@server-laptop'
alias ssh-iphone='screen -t iPhone ssh mobile@192.168.1.5'
alias ssh-ipad='screen -t iPad ssh mobile@192.168.1.4'
#alias ssh-macmini='screen -t macmini ssh -X mini@yuyumemi.dyndns.org'
alias ssh-macmini='screen -t macmini ssh mini@yuyumemi.dyndns.org'
alias dd-wrt='firefox http://192.168.1.1 &'
alias hatena='firefox http://d.hatena.ne.jp/yuyunko &'
alias mintsuspend='ssh -t mint@mint sudo pm-suspend'
alias wol='wakeonlan b8:ac:6f:54:1f:1e'
alias exifMov="exiftool '-FileName < CreateDate' -d /Volumes/new/backup/Mov/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.(MOV|mov)"
alias exifJpg="exiftool '-FileName < CreateDate' -d /Volumes/new/backup/Photos/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.(JPG|jpg)"
alias exifRecCreateDate="exiftool -r '-FileName < CreateDate' -d /Volumes/new/backup/Photos/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e ."
alias exifModifyJpg="exiftool '-FileName < FileModifyDate' -d /Volumes/new/backup/IMG/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.(JPG|jpg)"
alias exifRecFileModifyDate="exiftool -r '-FileName < FileModifyDate' -d /Volumes/new/backup/Photos/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e ."
alias exifPng="exiftool '-FileName < FileModifyDate' -d /Volumes/new/backup/Photos/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.(png|PNG)"
alias exifM2ts="exiftool '-FileName < DateTimeOriginal' -d /Volumes/new/backup/m2ts/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.(m2ts|M2TS)"
alias exifRecDateTimeOriginal="exiftool -r '-FileName < DateTimeOriginal' -d /Volumes/new/backup/m2ts/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e ."
alias tweetvim="vim -c TweetVimHomeTimeline"

# global alias
alias -g L=' | lv'
alias -g G=' | grep'

# }}}
#######################################################################################################
###{{{ function
function chpwd() { ls -F }

# 'google ほげほげ'ですぐに検索。
#function google() {
    #local str opt
    #if [ $ != 0 ]; then
        #for i in $*; do
            #str="$str+$i"
        #done
        #str=`echo $str | sed 's/^\+//'`
        #opt='search?num=50&hl=ja&lr=lang_ja'
        #opt="${opt}&q=${str}"
    #fi
    #w3m http://www.google.co.jp/$opt
#}

# w3mでALC検索
function alc() {
if [ $ != 0 ]; then
    w3m "http://eow.alc.co.jp/$*/UTF-8/?ref=sa"
else
    w3m "http://www.alc.co.jp/"
fi
}

# C-^ で一つ上のディレクトリへ
cdup() {
    if [ -z "$BUFFER" ]; then
        echo
        cd ..
        chpwd
        if type precmd > /dev/null 2>&1; then
            precmd
        fi
        local precmd_func
        for precmd_func in $precmd_functions; do
            $precmd_func
        done
        zle reset-prompt
    else
        zle self-insert '^'
    fi
}
zle -N cdup
bindkey '^^' cdup

# キーバインドがviの時に，ノーマルモードとインサートモードの状態を状況に応じて表示
readuntil () {
    typeset a
    while [ "$a" != "$1" ]
    do
        read -E -k 1 a
    done
}

#
# If the $SHOWMODE variable is set, displays the vi mode, specified by
# the $VIMODE variable, under the current command line.
#
# Arguments:
#
#   1 (optional): Beyond normal calculations, the number of additional
#   lines to move down before printing the mode.  Defaults to zero.
#
showmode() {
    typeset movedown
    typeset row

    # Get number of lines down to print mode
    movedown=$(($(echo "$RBUFFER" | wc -l) + ${1:-0}))

    # Get current row position
    echo -n "\e[6n"
    row="${${$(readuntil R)#*\[}%;*}"

    # Are we at the bottom of the terminal?
    if [ $((row+movedown)) -gt "$LINES" ]
    then
        # Scroll terminal up one line
        echo -n "\e[1S"

        # Move cursor up one line
        echo -n "\e[1A"
    fi

    # Save cursor position
    echo -n "\e[s"

    # Move cursor to start of line $movedown lines down
    echo -n "\e[$movedown;E"

    # Change font attributes
    echo -n "\e[1m"

    # Has a mode been set?
    if [ -n "$VIMODE" ]
    then
        # Print mode line
        echo -n "-- $VIMODE -- "
    else
        # Clear mode line
        echo -n "\e[0K"
    fi

    # Restore font
    echo -n "\e[0m"

    # Restore cursor position
    echo -n "\e[u"
}

clearmode() {
    VIMODE= showmode
}

#
# Temporary function to extend built-in widgets to display mode.
#
#   1: The name of the widget.
#
#   2: The mode string.
#
#   3 (optional): Beyond normal calculations, the number of additional
#   lines to move down before printing the mode.  Defaults to zero.
#
makemodal () {
    # Create new function
    eval "$1() { zle .'$1'; ${2:+VIMODE='$2'}; showmode $3 }"

    # Create new widget
    zle -N "$1"
}

# Extend widgets
makemodal vi-add-eol           INSERT
makemodal vi-add-next          INSERT
makemodal vi-change            INSERT
makemodal vi-change-eol        INSERT
makemodal vi-change-whole-line INSERT
makemodal vi-insert            INSERT
makemodal vi-insert-bol        INSERT
makemodal vi-open-line-above   INSERT
makemodal vi-substitute        INSERT
makemodal vi-open-line-below   INSERT 1
makemodal vi-replace           REPLACE
makemodal vi-cmd-mode          NORMAL

unfunction makemodal


# どの環境でもクリップボードにコピー(macではpbcopy linuxではxselが必要)
# 使い方
# % vim mail.txt    # vim でメールを書く
# % cat mail.txt C  # メールの内容をクリップボードにコピーする
# INPUT.txt のうち 10から15行目をクリップボードにコピーする
# % sed -n '10,15p' INPUT.txt C
if which pbcopy >/dev/null 2>&1 ; then
    # Mac
    alias -g C='| pbcopy'
elif which xsel >/dev/null 2>&1 ; then
    # Linux
    alias -g C='| xsel --input --clipboard'
elif which putclip >/dev/null 2>&1 ; then
    # Cygwin
    alias -g C='| putclip'
fi


#起動時にscreen起動
#case "${OSTYPE}" in
    #freebsd*|darwin*|cygwin)
        #if [ $TERM != "screen" ]; then
            #exec screen -U -RR
        #fi
        #;;
    #linux*)
        #if [ $TERM != "screen-bce" ]; then
            #exec byobu -U -RR
        #fi
        #;;
#esac

# screen 下部に実行コマンド記載
if [ "$TERM" = "screen" ]; then
    #     chpwd () { echo -n "_`dirs`\\" }
    preexec() {
        #         see [zsh-workers:13180]
        #         http://www.zsh.org/mla/workers/2000/msg03993.html
        emulate -L zsh
        local -a cmd; cmd=(${(z)2})
        case $cmd[1] in
            fg)
                if (( $#cmd == 1 )); then
                    cmd=(builtin jobs -l %+)
                else
                    cmd=(builtin jobs -l $cmd[2])
                fi
                ;;
            %*)
                cmd=(builtin jobs -l $cmd[1])
                ;;
            cd)
                if (( $#cmd == 2)); then
                    cmd[1]=$cmd[2]
                fi
                ;&
            *)
                echo -n "k$cmd[1]:t\\"
                return
                ;;
        esac

        local -A jt; jt=(${(kv)jobtexts})

        $cmd >>(read num rest
        cmd=(${(z)${(e):-\$jt$num}})
        echo -n "k$cmd[1]:t\\") 2>/dev/null
    }
    #     chpwd
fi

if [ $OSTYPE = "cygwin" ]; then
    if [ $TERM != "screen" ]; then
        exec screen -U -RR
    fi
else
    # http://filmlang.org/computer/tmux
    if [ -z $TMUX ]; then
        tmux attach -d || tmux
    fi
fi

# tmuxの中でsshを実行した場合，新しくウィンドウを作成する
# http://blog.repl.info/2011/12/03/ssh-with-tmux-and-zsh/
#if [ $OSTYPE != cygwin ]; then
    #if [ -z $TMUX ]; then
        #function ssh_tmux() {
        #eval server=\${$#}
        #tmux new-window -n $@ "exec ssh $@"
    #}
    #alias ssh=ssh_tmux
    #fi
#fi


# tmuxの中でmanを実行した場合，新しくペインを作成する
# http://blog.repl.info/2011/12/03/ssh-with-tmux-and-zsh/
#if [ $OSTYPE != cygwin ]; then
    #if [ $TERM = screen ]; then
        #function man_tmux() {
        #eval server=\${$#}
        #tmux split-window "exec man $@"
    #}
    #alias man=man_tmux
    #fi
#fi

############# macのみ #########################
# pbcopyで日本語(UTF-8)がコピーできるようになる
#__CF_USER_TEXT_ENCODING=0x1F5:1:14    # 元の値
if [ $OSTYPE = "darwin*" ]; then
    __CF_USER_TEXT_ENCODING=0x1F5:0x8000100:14
    export __CF_USER_TEXT_ENCODING
fi

# macのみ 処理時間が30秒以上なら終わった時Growlで通知
if [ $OSTYPE = "darwin*" ]; then
    local COMMAND=""
    local COMMAND_TIME=""
    precmd() {
        if [ "$COMMAND_TIME" -ne "0" ] ; then
            local d=`date +%s`
            d=`expr $d - $COMMAND_TIME`
            if [ "$d" -ge "30" ] ; then
                COMMAND="$COMMAND "
                growlnotify -t "${${(s: :)COMMAND}[1]}" -m "$COMMAND"
            fi
        fi
        COMMAND="0"
        COMMAND_TIME="0"
    }
    preexec () {
        COMMAND="${1}"
        COMMAND_TIME=`date +%s`
    }
fi
############# macのみ #########################

# }}}
#######################################################################################################
###{{{ plugins
# zaw
[[ ! -d "${HOME}/.zaw" ]] && git clone https://github.com/zsh-users/zaw.git ~/.zaw
zstyle ':filter-select' case-insensitive yes # 絞り込みをcase-insensitiveに
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 5000
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both
source ~/.zaw/zaw.zsh
# zaw-cdr
bindkey '^@' zaw-cdr # zaw-cdrをbindkey

# }}}
#######################################################################################################
#{{{ 個人用設定ファイルがあればそれを読み込む
if [ -e ~/.zshrc_private ]; then
    source ~/.zshrc_private
fi

# }}}
